{"version":3,"sources":["app.min.js"],"names":["EqcApp","angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","url","controller","templateUrl","$scope","latex","directive","restrict","template","replace","scope","link","element","attrs","quilled","render","text","document","createTextNode","field","find","appendChild","MathQuill","MathField","$interval","recreate","ngModel","leftquill","rightquill","lefttext","leftside","equalstext","righttext","rightside","leftfield","equalsfield","rightfield","setTypeAndCreate","type","$","addClass","each","index","this","handlers","enter","revert","attr","StaticMath","types","$watch","newVal","oldVal","indexOf"],"mappings":"AAAA,GAAIA,QAASC,QAAQC,OAAO,UAAW,aAEvCF,QAAOG,QAAQ,iBAAkB,qBAAsB,SAAUC,EAAgBC,GAChFA,EAAmBC,UAAU,KAE1BF,EAMCG,MAAM,aACRC,IAAK,IACLC,WAAY,sBACZC,YAAa,+CAIhBV,OAAOS,WAAW,uBAAwB,SAAU,SAASE,GAE3DA,EAAOC,MAAQ,cAIjBZ,OAAOS,WAAW,kBAAmB,SAAU,SAASE,OAGxDX,OAAOa,UAAU,gBAAiB,WAChC,OACEC,SAAU,IACVC,SACE,mFAGFC,SAAS,EACTC,OACEL,MAAO,KAETM,KAAM,SAASD,EAAOE,EAASC,GAC7B,GAAIC,EACJJ,GAAMK,OAAS,WACb,GAAIC,GAAOC,SAASC,eAAeR,EAAML,OACrCc,EAAQP,EAAQQ,KAAK,kBAAkB,EAC3CD,GAAME,YAAYL,GAClBF,EAAUQ,UAAUC,UAAUJ,GAC9BL,EAAQT,MAAMK,EAAML,QAEtBK,EAAMK,aAKZtB,OAAOa,UAAU,aAAc,YAAa,SAASkB,GACnD,OACEjB,SAAU,IACVC,SAAU,4HAKVC,SAAS,EACTC,OACES,MAAO,IACPM,SAAU,KAEZd,KAAM,SAASD,EAAOE,EAASC,EAAOa,GACpC,GAMIC,GAAWC,EANXC,EAAWZ,SAASC,eAAeR,EAAMS,MAAMW,UAC/CC,EAAad,SAASC,eAAe,KACrCc,EAAYf,SAASC,eAAeR,EAAMS,MAAMc,WAChDC,EAAYtB,EAAQQ,KAAK,aAAa,GACtCe,EAAcvB,EAAQQ,KAAK,eAAe,GAC1CgB,EAAaxB,EAAQQ,KAAK,cAAc,EAG5Cc,GAAUb,YAAYQ,GACtBO,EAAWf,YAAYW,EAEvB,IAAIK,GAAmB,WACI,sBAArB3B,EAAMS,MAAMmB,MACdC,EAAEL,GAAWM,SAAS,YACtBD,EAAEH,GAAYI,SAAS,aACO,sBAArB9B,EAAMS,MAAMmB,MACrBC,EAAEL,GAAWM,SAAS,YACtBL,EAAYd,YAAYU,GACxBQ,EAAEJ,GAAaK,SAAS,YACxBD,EAAEH,GAAYI,SAAS,aACO,aAArB9B,EAAMS,MAAMmB,KACrBC,EAAEH,GAAYI,SAAS,YACO,aAArB9B,EAAMS,MAAMmB,KACrBC,EAAEH,GAAYI,SAAS,aAEvBT,EAAad,SAASC,eAAe,kBACrCiB,EAAYd,YAAYU,GACxBQ,EAAEJ,GAAaK,SAAS,aAG1BD,EAAE3B,GAASQ,KAAK,iBAAiBqB,KAAK,SAASC,GAE7C,GAAIvB,GAAQG,UAAUC,UAAUoB,MAa9BC,UACEC,MAAO,WACLlB,EAAUtB,MAAM,QAChBsB,EAAUmB,YAMhBnB,GAAmC,aAAvBY,EAAEI,MAAMI,KAAK,MAAuB5B,EAAQQ,EACxDC,EAAoC,cAAvBW,EAAEI,MAAMI,KAAK,MAAwB5B,EAAQS,IAG5DW,EAAE3B,GAASQ,KAAK,iBAAiBqB,KAAK,WACpC,GAAItB,GAAQG,UAAU0B,WAAWL,KACjChB,GAAmC,aAAvBY,EAAEI,MAAMI,KAAK,MAAuB5B,EAAQQ,EACxDC,EAAoC,cAAvBW,EAAEI,MAAMI,KAAK,MAAwB5B,EAAQS,IAI9DS,IAQA,IAAIY,IAAS,oBAAqB,WAAY,oBAC9CvC,GAAMwC,OAAO,QAAS,SAASC,EAAQC,GAGjCA,EAAOd,OAASa,EAAOb,MAAuC,KAA/BW,EAAMI,QAAQF,EAAOb,QAC5B,mBAAfV,IACTA,EAAWkB,SAEY,mBAAdnB,IACTA,EAAUmB,SAEZT,KAGwB,mBAAfT,IACTA,EAAWvB,MAAMK,EAAMS,MAAMc,WAEN,mBAAdN,IACTA,EAAUtB,MAAMK,EAAMS,MAAMW,YAE7B","file":"app.min.js","sourcesContent":["var EqcApp = angular.module(\"EqcApp\", [\"ui.router\"]);\r\n\r\nEqcApp.config([\"$stateProvider\", \"$urlRouterProvider\", function ($stateProvider, $urlRouterProvider) {\r\n\t$urlRouterProvider.otherwise(\"/\");\r\n\r\n    $stateProvider\r\n\t\t// .state(\"main\", {\r\n\t\t// \turl: \"/\",\r\n\t\t// \tcontroller: \"MainController\",\r\n\t\t// \ttemplateUrl: \"app/components/main/main.html\"\r\n\t\t// })\r\n    .state(\"calculate\", {\r\n\t\t\turl: \"/\",\r\n\t\t\tcontroller: \"CalculateController\",\r\n\t\t\ttemplateUrl: \"app/components/calculate/calculate.html\"\r\n\t\t})\r\n}]);\r\n\nEqcApp.controller(\"CalculateController\", [\"$scope\", function($scope) {\r\n\r\n  $scope.latex = \"1+2+3=34\";\r\n\r\n}]);\r\n\nEqcApp.controller(\"MainController\", [\"$scope\", function($scope) {\r\n}]);\r\n\nEqcApp.directive(\"editablefield\", function() {\r\n  return {\r\n    restrict: \"E\",\r\n    template:\r\n      \"<div class='editable-math'>\" +\r\n        \"<span class='mfield' id='editablefield'></span>\" +\r\n      \"</div>\",\r\n    replace: true,\r\n    scope: {\r\n      latex: \"=\"\r\n    },\r\n    link: function(scope, element, attrs) {\r\n      var quilled;\r\n      scope.render = function() {\r\n        var text = document.createTextNode(scope.latex);\r\n        var field = element.find(\"#editablefield\")[0];\r\n        field.appendChild(text);\r\n        quilled = MathQuill.MathField(field);\r\n        quilled.latex(scope.latex);\r\n      };\r\n      scope.render();\r\n    }\r\n  };\r\n});\r\n\nEqcApp.directive('mathfield', [\"$interval\", function($interval) {\r\n  return {\r\n    restrict: 'E',\r\n    template: '<div>\\n' +\r\n      '<span id=\"leftside\"></span>\\n' +\r\n      '<span id=\"equalssign\"></span>\\n' +\r\n      '<span class=\"rightside\" id=\"rightside\"></span>\\n' +\r\n      '</div>',\r\n    replace: true,\r\n    scope: {\r\n      field: '=',\r\n      recreate: '&'\r\n    },\r\n    link: function(scope, element, attrs, ngModel) {\r\n      var lefttext = document.createTextNode(scope.field.leftside);\r\n      var equalstext = document.createTextNode(\"=\");\r\n      var righttext = document.createTextNode(scope.field.rightside);\r\n      var leftfield = element.find(\"#leftside\")[0];\r\n      var equalsfield = element.find(\"#equalssign\")[0];\r\n      var rightfield = element.find(\"#rightside\")[0];\r\n      var leftquill, rightquill;\r\n\r\n      leftfield.appendChild(lefttext);\r\n      rightfield.appendChild(righttext);\r\n\r\n      var setTypeAndCreate = function() {\r\n        if (scope.field.type === 'embedded-editable') {\r\n          $(leftfield).addClass(\"embedded\");\r\n          $(rightfield).addClass(\"editable\");\r\n        } else if (scope.field.type === 'editable-editable') {\r\n          $(leftfield).addClass(\"editable\");\r\n          equalsfield.appendChild(equalstext);\r\n          $(equalsfield).addClass(\"embedded\");\r\n          $(rightfield).addClass(\"editable\");\r\n        } else if (scope.field.type === 'editable') {\r\n          $(rightfield).addClass(\"editable\");\r\n        } else if (scope.field.type === 'embedded') {\r\n          $(rightfield).addClass(\"embedded\")\r\n        } else {\r\n          equalstext = document.createTextNode(\"undefined type\");\r\n          equalsfield.appendChild(equalstext);\r\n          $(equalsfield).addClass(\"editable\");\r\n        }\r\n\r\n        $(element).find(\"span.editable\").each(function(index) {\r\n          //                    console.log($(this).attr('id'));\r\n          var field = MathQuill.MathField(this, {\r\n            //                    spaceBehavesLikeTab: true,\r\n            //                    leftRightIntoCmdGoes: 'up',\r\n            //                    restrictMismatchedBrackets: true,\r\n            //                    sumStartsWithNEquals: true,\r\n            //                    supSubsRequireOperand: true,\r\n            //                    charsThatBreakOutOfSupSub: '+-=<>',\r\n            ////                autoSubscriptNumerals: true,\r\n            //                    autoCommands: 'pi theta sqrt sum',\r\n            //                    autoOperatorNames: 'sin cos etc',\r\n            //                    substituteTextarea: function () {\r\n            //                        return document.createElement('textarea');\r\n            //                    },\r\n            handlers: {\r\n              enter: function() {\r\n                leftquill.latex('heei');\r\n                leftquill.revert();\r\n                //                            console.log(\"asfd\", mathq.latex());\r\n                //                            console.log(scope.field.assignment);\r\n              }\r\n            }\r\n          });\r\n          leftquill = $(this).attr('id') === 'leftside' ? field : leftquill;\r\n          rightquill = $(this).attr('id') === 'rightside' ? field : rightquill;\r\n        });\r\n\r\n        $(element).find(\"span.embedded\").each(function() {\r\n          var field = MathQuill.StaticMath(this);\r\n          leftquill = $(this).attr('id') === 'leftside' ? field : leftquill;\r\n          rightquill = $(this).attr('id') === 'rightside' ? field : rightquill;\r\n        });\r\n      };\r\n\r\n      setTypeAndCreate();\r\n      //            scope.$watch(function() { console.log(\"asdf\");}, function () {\r\n      //                console.log(\"watch triggered\");\r\n      //            })\r\n\r\n      //            scope.$watch(ngModel, function () {\r\n      //                console.log(\"ng model\", ngModel);\r\n      //            })\r\n      var types = ['editable-editable', 'editable', 'embedded-editable'];\r\n      scope.$watch('field', function(newVal, oldVal) {\r\n        //                console.log(\"watch triggered\", oldVal, newVal);\r\n        //                console.log(\"ja indexof \" + types.indexOf(newVal.type));\r\n        if (oldVal.type !== newVal.type && types.indexOf(newVal.type) !== -1) {\r\n          if (typeof rightquill !== \"undefined\") {\r\n            rightquill.revert();\r\n          }\r\n          if (typeof leftquill !== \"undefined\") {\r\n            leftquill.revert();\r\n          }\r\n          setTypeAndCreate();\r\n          //                    return;\r\n        }\r\n        if (typeof rightquill !== \"undefined\") {\r\n          rightquill.latex(scope.field.rightside);\r\n        }\r\n        if (typeof leftquill !== \"undefined\") {\r\n          leftquill.latex(scope.field.leftside);\r\n        }\r\n      }, true);\r\n\r\n      //            var latexWatcher = $interval(function () {\r\n      ////                console.log(\"ea\", typeof rightquill);\r\n      //                if (typeof rightquill !== \"undefined\") {\r\n      ////                    console.log(rightquill.latex() + \" and \" + scope.field.rightside);\r\n      //                    rightquill.latex(scope.field.rightside);\r\n      //                }\r\n      //                if (typeof leftquill !== \"undefined\") {\r\n      ////                    console.log(leftquill.latex() + \" and \" + scope.field.leftside);\r\n      //                    leftquill.latex(scope.field.leftside);\r\n      //                }\r\n      //            }, 500);\r\n      //            scope.$on('$destroy', function () {\r\n      //                $interval.cancel(latexWatcher);\r\n      //            });\r\n    }\r\n  };\r\n}]);\r\n"],"sourceRoot":"/source/"}