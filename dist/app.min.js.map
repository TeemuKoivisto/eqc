{"version":3,"sources":["app.min.js"],"names":["EqcApp","angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","url","controller","templateUrl","$scope","latex","solvefields","order","type","leftside","rightside","solution","result","variables","key","solutions","combinations","solved","directive","restrict","template","replace","scope","link","element","attrs","quilled","render","text","document","createTextNode","field","find","appendChild","MathQuill","MathField","$interval","recreate","ngModel","leftquill","rightquill","lefttext","equalstext","righttext","leftfield","equalsfield","rightfield","setTypeAndCreate","$","addClass","each","index","this","handlers","enter","revert","attr","StaticMath","types","$watch","newVal","oldVal","indexOf","solveinfos","getType","setFieldOrder","i","length","$apply","createSolvefield","console","log","splice","removeSolvefield","context","solve","solveExercise","$on","event","data","resolve","Logdef","timerStart","eqc","equation","Parser","parseEquation","toLatex","solutionlist","replaceFieldsWithSolution","timerEnd","newlist","infos","push","step","stepName","formula","require","solveareaCtrl","commands","keys","command","args","className","performance","now","spaceBehavesLikeTab","capturingKeyEvents","captureKeyEvent","special","refresh","evt","preventDefault","afterCaptureKeyEvent"],"mappings":"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","file":"app.min.js","sourcesContent":["var EqcApp = angular.module(\"EqcApp\", [\"ui.router\"]);\r\n\r\nEqcApp.config([\"$stateProvider\", \"$urlRouterProvider\", function ($stateProvider, $urlRouterProvider) {\r\n\t$urlRouterProvider.otherwise(\"/\");\r\n\r\n    $stateProvider\r\n\t\t// .state(\"main\", {\r\n\t\t// \turl: \"/\",\r\n\t\t// \tcontroller: \"MainController\",\r\n\t\t// \ttemplateUrl: \"app/components/main/main.html\"\r\n\t\t// })\r\n    .state(\"calculate\", {\r\n\t\t\turl: \"/\",\r\n\t\t\tcontroller: \"CalculateController\",\r\n\t\t\ttemplateUrl: \"templates/calculate/calculate.html\"\r\n\t\t})\r\n}]);\r\n\nEqcApp.controller(\"CalculateController\", [\"$scope\", function($scope) {\r\n\r\n  $scope.latex = \"1+2+3=34\";\r\n  $scope.solvefields = [{\r\n    order: 0,\r\n    type: \"editable\",\r\n    leftside: \"\",\r\n    rightside: \"3\\\\left(3+4\\\\right)-\\\\frac{3}{5}=2n\",\r\n    solution: {\r\n      result: \"true\",\r\n      variables: [{\r\n        key: \"n\",\r\n        solutions: [\"10.2\"]\r\n      }],\r\n      combinations: [\r\n        \"n=10.2\"\r\n      ]\r\n    },\r\n    solved: \"\"\r\n  }]\r\n}]);\r\n\nEqcApp.controller(\"MainController\", [\"$scope\", function($scope) {\r\n}]);\r\n\nEqcApp.directive(\"editablefield\", function() {\r\n  return {\r\n    restrict: \"E\",\r\n    template:\r\n      \"<div class='editable-math'>\" +\r\n        \"<span class='mfield' id='editablefield'></span>\" +\r\n      \"</div>\",\r\n    replace: true,\r\n    scope: {\r\n      latex: \"=\"\r\n    },\r\n    link: function(scope, element, attrs) {\r\n      var quilled;\r\n      scope.render = function() {\r\n        var text = document.createTextNode(scope.latex);\r\n        var field = element.find(\"#editablefield\")[0];\r\n        field.appendChild(text);\r\n        quilled = MathQuill.MathField(field);\r\n        quilled.latex(scope.latex);\r\n      };\r\n      scope.render();\r\n    }\r\n  };\r\n});\r\n\nEqcApp.directive('mathfield', [\"$interval\", function($interval) {\r\n  return {\r\n    restrict: 'E',\r\n    template: '<div>\\n' +\r\n      '<span id=\"leftside\"></span>\\n' +\r\n      '<span id=\"equalssign\"></span>\\n' +\r\n      '<span class=\"rightside\" id=\"rightside\"></span>\\n' +\r\n      '</div>',\r\n    replace: true,\r\n    scope: {\r\n      field: '=',\r\n      recreate: '&'\r\n    },\r\n    link: function(scope, element, attrs, ngModel) {\r\n      var lefttext = document.createTextNode(scope.field.leftside);\r\n      var equalstext = document.createTextNode(\"=\");\r\n      var righttext = document.createTextNode(scope.field.rightside);\r\n      var leftfield = element.find(\"#leftside\")[0];\r\n      var equalsfield = element.find(\"#equalssign\")[0];\r\n      var rightfield = element.find(\"#rightside\")[0];\r\n      var leftquill, rightquill;\r\n\r\n      leftfield.appendChild(lefttext);\r\n      rightfield.appendChild(righttext);\r\n\r\n      var setTypeAndCreate = function() {\r\n        if (scope.field.type === 'embedded-editable') {\r\n          $(leftfield).addClass(\"embedded\");\r\n          $(rightfield).addClass(\"editable\");\r\n        } else if (scope.field.type === 'editable-editable') {\r\n          $(leftfield).addClass(\"editable\");\r\n          equalsfield.appendChild(equalstext);\r\n          $(equalsfield).addClass(\"embedded\");\r\n          $(rightfield).addClass(\"editable\");\r\n        } else if (scope.field.type === 'editable') {\r\n          $(rightfield).addClass(\"editable\");\r\n        } else if (scope.field.type === 'embedded') {\r\n          $(rightfield).addClass(\"embedded\")\r\n        } else {\r\n          equalstext = document.createTextNode(\"undefined type\");\r\n          equalsfield.appendChild(equalstext);\r\n          $(equalsfield).addClass(\"editable\");\r\n        }\r\n\r\n        $(element).find(\"span.editable\").each(function(index) {\r\n          //                    console.log($(this).attr('id'));\r\n          var field = MathQuill.MathField(this, {\r\n            //                    spaceBehavesLikeTab: true,\r\n            //                    leftRightIntoCmdGoes: 'up',\r\n            //                    restrictMismatchedBrackets: true,\r\n            //                    sumStartsWithNEquals: true,\r\n            //                    supSubsRequireOperand: true,\r\n            //                    charsThatBreakOutOfSupSub: '+-=<>',\r\n            ////                autoSubscriptNumerals: true,\r\n            //                    autoCommands: 'pi theta sqrt sum',\r\n            //                    autoOperatorNames: 'sin cos etc',\r\n            //                    substituteTextarea: function () {\r\n            //                        return document.createElement('textarea');\r\n            //                    },\r\n            handlers: {\r\n              enter: function() {\r\n                leftquill.latex('heei');\r\n                leftquill.revert();\r\n                //                            console.log(\"asfd\", mathq.latex());\r\n                //                            console.log(scope.field.assignment);\r\n              }\r\n            }\r\n          });\r\n          leftquill = $(this).attr('id') === 'leftside' ? field : leftquill;\r\n          rightquill = $(this).attr('id') === 'rightside' ? field : rightquill;\r\n        });\r\n\r\n        $(element).find(\"span.embedded\").each(function() {\r\n          var field = MathQuill.StaticMath(this);\r\n          leftquill = $(this).attr('id') === 'leftside' ? field : leftquill;\r\n          rightquill = $(this).attr('id') === 'rightside' ? field : rightquill;\r\n        });\r\n      };\r\n\r\n      setTypeAndCreate();\r\n      //            scope.$watch(function() { console.log(\"asdf\");}, function () {\r\n      //                console.log(\"watch triggered\");\r\n      //            })\r\n\r\n      //            scope.$watch(ngModel, function () {\r\n      //                console.log(\"ng model\", ngModel);\r\n      //            })\r\n      var types = ['editable-editable', 'editable', 'embedded-editable'];\r\n      scope.$watch('field', function(newVal, oldVal) {\r\n        //                console.log(\"watch triggered\", oldVal, newVal);\r\n        //                console.log(\"ja indexof \" + types.indexOf(newVal.type));\r\n        if (oldVal.type !== newVal.type && types.indexOf(newVal.type) !== -1) {\r\n          if (typeof rightquill !== \"undefined\") {\r\n            rightquill.revert();\r\n          }\r\n          if (typeof leftquill !== \"undefined\") {\r\n            leftquill.revert();\r\n          }\r\n          setTypeAndCreate();\r\n          //                    return;\r\n        }\r\n        if (typeof rightquill !== \"undefined\") {\r\n          rightquill.latex(scope.field.rightside);\r\n        }\r\n        if (typeof leftquill !== \"undefined\") {\r\n          leftquill.latex(scope.field.leftside);\r\n        }\r\n      }, true);\r\n\r\n      //            var latexWatcher = $interval(function () {\r\n      ////                console.log(\"ea\", typeof rightquill);\r\n      //                if (typeof rightquill !== \"undefined\") {\r\n      ////                    console.log(rightquill.latex() + \" and \" + scope.field.rightside);\r\n      //                    rightquill.latex(scope.field.rightside);\r\n      //                }\r\n      //                if (typeof leftquill !== \"undefined\") {\r\n      ////                    console.log(leftquill.latex() + \" and \" + scope.field.leftside);\r\n      //                    leftquill.latex(scope.field.leftside);\r\n      //                }\r\n      //            }, 500);\r\n      //            scope.$on('$destroy', function () {\r\n      //                $interval.cancel(latexWatcher);\r\n      //            });\r\n    }\r\n  };\r\n}]);\r\n\nEqcApp.directive(\"solvearea\", function() {\r\n  return {\r\n    restrict: \"E\",\r\n    templateUrl: \"templates/math-directives/solvearea.html\",\r\n    scope: {\r\n      type: \"=\",\r\n      solved: \"=\",\r\n      solvefields: \"=\"\r\n    },\r\n    controller: [\"$scope\", function($scope) {\r\n      $scope.solveinfos = [];\r\n\r\n      // for solvefield\r\n      this.getType = function() {\r\n        return $scope.type;\r\n      }\r\n\r\n      this.setFieldOrder = function() {\r\n        for (var i = 0; i < $scope.solvefields.length; i++) {\r\n          $scope.solvefields[i].order = i;\r\n        }\r\n        $scope.$apply();\r\n      };\r\n\r\n      this.createSolvefield = function(order) {\r\n        console.log(\"createSolvefield\");\r\n        if ($scope.solvefields.length < 15) {\r\n          $scope.solvefields.splice(order + 1, 0, {\r\n            order: order + 1,\r\n            type: $scope.solvefields[order].type,\r\n            leftside: $scope.solvefields[order].leftside,\r\n            rightside: $scope.solvefields[order].rightside,\r\n            solution: $scope.solvefields[order].solution,\r\n            solved: \"\"\r\n          });\r\n          this.setFieldOrder();\r\n        }\r\n      };\r\n\r\n      this.removeSolvefield = function(order) {\r\n        console.log(\"removeSfield\");\r\n        if ($scope.solvefields.length > 1) {\r\n          $scope.solvefields.splice(order, 1);\r\n          this.setFieldOrder();\r\n        }\r\n      };\r\n\r\n      // this is so fail... x_x\r\n      // $scope doesn\"t know directive and can\"t use the regular solveExercise\r\n      // as it is not recognized by the template\r\n      var context = this;\r\n      $scope.solve = function(order) {\r\n        context.solveExercise(order);\r\n      }\r\n\r\n      $scope.$on(\"solve\", function(event, data) {\r\n        // console.log(\"event kaapattu\", data);\r\n        $scope.solve(0);\r\n        data.resolve();\r\n      })\r\n\r\n      this.solveExercise = function(order) {\r\n        Logdef.timerStart(\"solveExercise\");\r\n        console.log(\"solving \" + order);\r\n        if ($scope.type === \"solve\") {\r\n          var solved = \"true\";\r\n          for (var i = 0; i < $scope.solvefields.length; i++) {\r\n            if ($scope.solvefields[i].type === \"editable\") {\r\n              // if (i !== $scope.solvefields.length-1 || $scope.solvefields[i].solution.combinations.length === 0) {\r\n              var latex = $scope.solvefields[i].rightside;\r\n              // if ($scope.solvefields[i].rightside.indexOf(\"=\") === -1) {\r\n              // // latex += \"=\" + $scope.solvefields[i].rightside;\r\n              // latex += $scope.solvefields[i].rightside;\r\n              // } else {\r\n              // latex = $scope.solvefields[i].rightside;\r\n              // }\r\n\r\n              /*var result = CalculatorSolver.checkEquationIsSolution(latex, $scope.solvefields[i].solution);*/\r\n              console.log(eqc)\r\n              var equation = eqc.Parser.parseEquation(latex);\r\n              console.log(equation.toLatex())\r\n              var result = \"\";\r\n\r\n              if (result !== \"false\") {\r\n                $scope.solvefields[i].solved = result;\r\n                solved = result;\r\n              } else {\r\n                $scope.solvefields[i].solved = result;\r\n                solved = result;\r\n                break;\r\n              }\r\n              // } else {\r\n              // // last solvefield, should be at least one correct combination\r\n              // var result = CalculatorSolver.checkEquationIsSolution($scope.solvefields[i].rightside, $scope.solvefields[i].solution);\r\n              // $scope.solvefields[i].solved = result;\r\n              // solved = result;\r\n              // }\r\n            }\r\n          }\r\n          if ($scope.solved !== \"true\") {\r\n            $scope.solved = solved;\r\n          }\r\n        } else if ($scope.type === \"check\") {\r\n          // solves the latex inside mathquill editable and compares to\r\n          // solvefield\"s solution value\r\n          // console.log(\"what fucking is solvefield \", $scope.solvefields[order]);\r\n          var equation = $scope.solvefields[order].leftside;\r\n          equation += $scope.solvefields[order].type === \"editable-editable\" ? \"=\" : \"\";\r\n          equation += $scope.solvefields[order].rightside;\r\n          // console.log(\"checking \" + equation);\r\n\r\n          /*var result = CalculatorSolver.checkEquationIsSolution(equation, $scope.solvefields[order].solution);*/\r\n          var result = \"\";\r\n          // var result = CalculatorSolver.checkStuff(equation, $scope.solvefields[order].solution);\r\n          // console.log(\"result is \" + result);\r\n\r\n          $scope.solvefields[order].solved = result;\r\n          if ($scope.solved !== \"true\" && result === \"true\") {\r\n            $scope.solved = \"true\";\r\n          } else if ($scope.solved !== \"true\") {\r\n            $scope.solved = result;\r\n          }\r\n        } else if ($scope.type === \"show\") {\r\n          // solves equation and shows each step\r\n          var equation = $scope.solvefields[order].leftside;\r\n          equation += $scope.solvefields[order].type === \"editable-editable\" ? \"=\" : \"\";\r\n          equation += $scope.solvefields[order].rightside;\r\n          console.log(\"showing \" + equation);\r\n\r\n          /*var solutionlist = CalculatorSolver.solveEquationLogged(equation);*/\r\n          var solutionlist = [];\r\n          if (solutionlist.length > 0) {\r\n            this.replaceFieldsWithSolution(solutionlist);\r\n          }\r\n        }\r\n        Logdef.timerEnd(\"solveExercise\");\r\n      };\r\n\r\n      this.replaceFieldsWithSolution = function(solutionlist) {\r\n        // console.log(\"replacing stuff\");\r\n        console.log(\"\", solutionlist)\r\n        var newlist = [],\r\n          infos = [];\r\n        for (var i = 0; i < solutionlist.length; i++) {\r\n          newlist.push({\r\n            order: i,\r\n            type: \"editable\",\r\n            // ei tukea embedded editablella jne. koska latexia ei ole jaettu\r\n            leftside: \"\",\r\n            rightside: solutionlist[i].latex,\r\n            solution: $scope.solvefields[0].solution,\r\n            solved: \"\"\r\n          });\r\n          infos.push({\r\n            step: solutionlist[i].stepName,\r\n            formula: solutionlist[i].formula\r\n          });\r\n        }\r\n        $scope.solvefields = newlist;\r\n        $scope.solveinfos = infos;\r\n        //console.log($scope.solveinfos);\r\n      }\r\n    }]\r\n  }\r\n});\r\n\r\nEqcApp.directive(\"solvefield\", [\"$interval\", function($interval) {\r\n  return {\r\n    restrict: \"E\",\r\n    templateUrl: \"templates/math-directives/solvefield.html\",\r\n    replace: true,\r\n    scope: {\r\n      field: \"=\"\r\n    },\r\n    require: \"^solvearea\",\r\n    link: function(scope, element, attrs, solveareaCtrl) {\r\n      var commands = [{\r\n        types: \"check-solve-show\",\r\n        keys: \"Enter\",\r\n        command: \"solveExercise\",\r\n        args: 1\r\n      }, {\r\n        types: \"solve\",\r\n        keys: \"Shift-Enter\",\r\n        command: \"createSolvefield\",\r\n        args: 1\r\n      }, {\r\n        types: \"solve\",\r\n        keys: \"Shift-Backspace\",\r\n        command: \"removeSolvefield\",\r\n        args: 1\r\n      }];\r\n\r\n      var lefttext = document.createTextNode(scope.field.leftside);\r\n      var equalstext = document.createTextNode(\"=\");\r\n      var righttext = document.createTextNode(scope.field.rightside);\r\n      var leftfield = element.find(\"#leftside\")[0];\r\n      var equalsfield = element.find(\"#equalssign\")[0];\r\n      var rightfield = element.find(\"#rightside\")[0];\r\n      var leftquill, rightquill;\r\n\r\n      leftfield.appendChild(lefttext);\r\n      rightfield.appendChild(righttext);\r\n\r\n      var setTypeAndCreate = function() {\r\n        if (scope.field.type === \"embedded-editable\") {\r\n          leftfield.className = \"embedded\";\r\n          rightfield.className = \"editable\";\r\n        } else if (scope.field.type === \"editable-editable\") {\r\n          leftfield.className = \"editable\";\r\n          equalsfield.appendChild(equalstext);\r\n          equalsfield.className = \"embedded\";\r\n          rightfield.className = \"editable\";\r\n        } else if (scope.field.type === \"editable\") {\r\n          rightfield.className = \"editable\";\r\n        } else {\r\n          equalstext = document.createTextNode(\"undefined type\");\r\n          equalsfield.appendChild(equalstext);\r\n          equalsfield.className = \"editable\";\r\n        }\r\n        var start = performance.now();\r\n        Logdef.timerStart(\"solvefield MathField each\")\r\n          // element.find().\r\n        $(element).find(\"span.editable\").each(function(index) {\r\n          var field = MathQuill.MathField(this, {\r\n            spaceBehavesLikeTab: true,\r\n            capturingKeyEvents: true,\r\n            handlers: {\r\n              captureKeyEvent: function(special) {\r\n                refresh();\r\n                for (var i = 0; i < commands.length; i++) {\r\n                  // commands[i].types.indexOf(solveareaCtrl.type)\r\n                  if (commands[i].types.indexOf(solveareaCtrl.getType()) !== -1 && commands[i].keys === special.key) {\r\n                    console.log(\"executing command \" + commands[i].command);\r\n                    //                                if (commands[i].args !=)\r\n                    // console.log(\"executing from \", scope.field);\r\n                    special.evt.preventDefault();\r\n                    solveareaCtrl[commands[i].command](scope.field.order);\r\n                    scope.$apply();\r\n                  }\r\n                }\r\n              },\r\n              afterCaptureKeyEvent: function() {\r\n                refresh();\r\n              }\r\n            }\r\n          });\r\n          leftquill = $(this).attr(\"id\") === \"leftside\" ? field : leftquill;\r\n          rightquill = $(this).attr(\"id\") === \"rightside\" ? field : rightquill;\r\n        });\r\n        Logdef.timerEnd(\"solvefield MathField each\")\r\n\r\n        $(element).find(\"span.embedded\").each(function() {\r\n          var field = MathQuill.StaticMath(this);\r\n          leftquill = $(this).attr(\"id\") === \"leftside\" ? field : leftquill;\r\n          rightquill = $(this).attr(\"id\") === \"rightside\" ? field : rightquill;\r\n        });\r\n      };\r\n\r\n      setTypeAndCreate();\r\n\r\n      var refresh = function() {\r\n        if (leftquill) {\r\n          scope.field.leftside = leftquill.latex();\r\n        }\r\n        if (rightquill) {\r\n          scope.field.rightside = rightquill.latex();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}]);\r\n"],"sourceRoot":"/source/"}